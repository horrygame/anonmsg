import os
import sys
import argparse
import socket
import threading
import json
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn
from urllib.parse import urlparse, parse_qs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('AnonMsg')

# ------------------------- –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å -------------------------

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä"""
    daemon_threads = True

class MessengerServer:
    """–°–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ AnonMsg"""
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.clients = {}
        self.messages = []
        self.next_id = 1
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind((self.host, self.port))
        self.socket.listen(10)
        
        logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        try:
            while True:
                client_socket, address = self.socket.accept()
                threading.Thread(
                    target=self.handle_client,
                    args=(client_socket, address),
                    daemon=True
                ).start()
        except KeyboardInterrupt:
            logger.info("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            self.socket.close()
    
    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
            nickname = client_socket.recv(1024).decode().strip()
            if not nickname:
                return
                
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            self.clients[client_socket] = nickname
            logger.info(f"‚ûï {nickname} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è ({address[0]})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            history = json.dumps({
                "type": "history",
                "messages": self.messages[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
            })
            client_socket.send(history.encode())
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            self.broadcast({
                "type": "notification",
                "text": f"{nickname} –≤–æ—à—ë–ª –≤ —á–∞—Ç"
            }, exclude=client_socket)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            while True:
                message = client_socket.recv(1024).decode()
                if not message:
                    break
                    
                try:
                    data = json.loads(message)
                    if data["type"] == "message":
                        self.process_message(data, client_socket)
                except:
                    pass
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
        finally:
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            if client_socket in self.clients:
                nickname = self.clients[client_socket]
                del self.clients[client_socket]
                logger.info(f"‚ûñ {nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
                self.broadcast({
                    "type": "notification",
                    "text": f"{nickname} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç"
                })
            client_socket.close()
    
    def process_message(self, data, sender_socket):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        nickname = self.clients[sender_socket]
        message = {
            "id": self.next_id,
            "sender": nickname,
            "text": data["text"],
            "timestamp": data["timestamp"]
        }
        self.next_id += 1
        self.messages.append(message)
        
        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        self.broadcast({
            "type": "message",
            "message": message
        })
    
    def broadcast(self, data, exclude=None):
        """–†–∞—Å—Å—ã–ª–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        message = json.dumps(data)
        for client in list(self.clients.keys()):
            if client != exclude:
                try:
                    client.send(message.encode())
                except:
                    pass

# ------------------------- HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -------------------------

class WebRequestHandler(BaseHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.path.startswith('/api/messages'):
                self.handle_api_messages()
                return
                
            # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            self.handle_static_files()
                
        except Exception as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e}")
            self.send_error(500, "Internal Server Error")
    
    def handle_api_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        query = urlparse(self.path).query
        params = parse_qs(query)
        since_id = int(params.get('since_id', [0])[0])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [msg for msg in self.server.messenger.messages if msg["id"] > since_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(messages).encode())
    
    def handle_static_files(self):
        """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if self.path == '/':
            filepath = 'index.html'
        else:
            filepath = self.path.lstrip('/')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(filepath):
            self.send_error(404, "File Not Found")
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        if filepath.endswith(".html"):
            content_type = 'text/html'
        elif filepath.endswith(".css"):
            content_type = 'text/css'
        elif filepath.endswith(".js"):
            content_type = 'application/javascript'
        elif filepath.endswith(".png"):
            content_type = 'image/png'
        elif filepath.endswith(".jpg") or filepath.endswith(".jpeg"):
            content_type = 'image/jpeg'
        else:
            content_type = 'text/plain'
            
        # –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'rb') as f:
            content = f.read()
            
        self.send_response(200)
        self.send_header('Content-type', content_type)
        self.send_header('Content-Length', len(content))
        self.end_headers()
        self.wfile.write(content)
    
    def log_message(self, format, *args):
        """–û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        pass

# ------------------------- –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ -------------------------

def run_server(host, port, web_port):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
    messenger = MessengerServer(host, port)
    threading.Thread(target=messenger.start, daemon=True).start()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    web_server = ThreadedHTTPServer(('0.0.0.0', web_port), WebRequestHandler)
    web_server.messenger = messenger  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä
    
    logger.info(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{web_port}")
    logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        web_server.serve_forever()
    except KeyboardInterrupt:
        pass
    finally:
        web_server.server_close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='AnonMsg Messenger')
    parser.add_argument('--host', type=str, default='0.0.0.0', 
                        help='Server host (default: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=65432, 
                        help='Messenger port (default: 65432)')
    parser.add_argument('--web', type=int, default=8080, 
                        help='Web interface port (default: 8080)')
    
    args = parser.parse_args()
    
    run_server(args.host, args.port, args.web)
